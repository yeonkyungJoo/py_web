* 패킷 교환(packet switching) : 작은 블록의 패킷으로 쪼개서 데이터를 전송하는 방식. 데이터를 작게 쪼개서 먼 곳에 보냈다가 다시 합침. 1960년대 초, 영국과 미국의 연구자들이 발명.

# 인터넷의 시작 : 월드와이드웹(WWW) 발명
- 유럽입자물리연구소(CERN) 소속 연구원 팀 버너스 리가 고안
- 한 문서에서 다른 문서로 접근한다는 개념인 '하이퍼텍스트(Hypertext)'를 적용한 HTML
- 문서에 주소를 붙이는 URL
- 컴퓨터와 컴퓨터 간에 메시지를 주고받을 수 있는 통신 규약인 HTTP
- 전 세계 인터넷 콘텐츠를 연결해 공유할 수 있도록 하는 WWW(World Wide Web)
- 최초의 사이트 : http://info.cern.ch/

# 인터넷의 시작 : 웹의 진화
1) 하이퍼텍스트 문서
 - 기본적인 서식과 하이퍼링크를 내재한 텍스트 문서
2) 웹 페이지
 - 이미지, 오디오 등 리소스를 제공하고, 풍부하고 화려한 레이아웃 내재화
 - 시각적으로는 아름답지만 사용자와의 상호작용이 불가능해서, 마치 종이에 인쇄된 페이지와 같음
3) 웹 어플리케이션
 - 사용자와 상호작용이 가능하고 복잡한 처리 또한 가능한 웹 브라우저에서의 프로그램
 (웹 브라우저 상에서 실행 가능)

# 서버와 클라이언트
- 서버도 요청을 보낼 수 있다. 이 때, 요청을 보낸 서버가 클라이언트가 된다.
- 웹 브라우저만이 클라이언트가 되는 것은 아니다.
=> 서버-클라이언트는 상대적인 개념
 
1) 클라이언트는 요청을 보내는 주체
 - 크롬, 사파리, 엣지, 파이어폭스 등 웹 브라우저 : 웹 페이지에 접근하기 위해 사용하는 어플리케이션
 - 데스크톱 앱 혹은 모바일 앱
 - 다른 서버에 요청을 보내는 서버
 - 개발자가 개발한 별도의 소프트웨어
 
2) 서버는 네트워크를 통해 클라이언트에 정보 혹은 서비스를 제공하는 컴퓨터(또는 프로그램)
 - 웹페이지, 웹사이트, 앱 등을 저장한 컴퓨터
 - 웹 서버 애플리케이션을 통해 만들어진 애플리케이션 (웹 프레임워크로 웹 서버를 개발)
 
- 웹 프로그래밍이란, HTTP 프로토콜로 통신하는 클라이언트와 서버를 개발하는 것

# HTTP와 웹 브라우저의 역할
1. 웹 브라우저 주소창에 URL(자원의 위치) 입력
2. URL 해석
3. HTTP 요청 : 해석한 결과에 따라 브라우저는 다른 컴퓨터(서버)로 http를 통해 요청 데이터를 보낸다
4. (서버) 요청 확인 : 웹 서버는 받은 데이터를 해석하고, 브라우저에게 필요한 html 문서를 찾는다
5. HTTP 응답
6. 렌더링

* HTTP 요청
- 메서드(Method) : 서버가 수행해야 할 동작 / GET, POST, DELETE 등
- URL 주소
- 헤더(Header) : 브라우저 정보, 언어 등 여러 정보 포함
- 본문(Body) : ID/PW, 내용 등 (없어도 된다)

* HTTP 응답
- 상태코드 : 요청의 성공 여부 / 200(OK), 400(Not found) 등
- 헤더(Header)
- 본문(Body) : HTML 코드 등의 파일. 에러가 났다면 생략될 수도 있다

- 웹 브라우저와 서버는 리소스를 주고 받는 형식을 미리 약속(프로토콜)으로 정해두었고, 이에 따라 동작

# 개발자 도구의 'Network' 탭
 : 페이지를 로딩하는 데 필요한 네트워크 작업에 대한 결과를 시간 순으로 표시
   이를 통해, 웹 서버와 주고받는 데이터의 실제 모습을 볼 수 있다
   
# 프론트엔트와 백엔드
1) 프론트엔드
 - 사용자의 요청을 잘 반영
 - 적절한 레이아웃과 보기 좋은 디자인
 - 웹 콘텐츠를 구조화
 [필요지식]
 - JavaScript, CSS, HTML
 
2) 백엔드
 - 클라이언트의 요청을 처리
 [필요지식]
 - 운영체제(Linux 등), 네트워크
 - 데이터베이스
 - Spring, Flask/Django 등 프레임워크
 - Java, PHP, Python 등 프로그래밍 언어
 
# HTML(HyperText Mark-up Language)
1) HTML이란?
 - 반복문, 조건문 등 연산이 가능한 프로그래밍 언어(e.g. Python)와는 다름.
 - 웹 페이지에서 콘텐츠의 구조를 표현하기 위해 고안된 텍스트 포맷
 - 컨텐츠의 서로 다른 부분들을 태그(tag)를 씌우거나 감싸서, 다른 형식으로 보이게 하거나 특정한 방식으로 동작하도록 함.
 
2) HTML의 역할과 책임 : 구조
 - HTML의 역할과 책임은 콘텐츠의 구조를 나타내는 것
 - 웹 브라우저는 HTML 태그를 그대로 보여주지 않고, 태그의 구조와 특성을 파악(해석)해 그래픽으로 보여줌(parsing)
  - 사례 1 : https://www.naver.com를 어떻게 보여주어야 할지 알려주는 방법
  - 사례 2 : 검색엔진이 페이지를 파악하기 위한 방법
  - 사례 3 : 다른 개발자들과의 원활한 협업
  - 사례 4 : 시각장애인이 페이지를 소리로 들을 때 사용하는 스크린리더 등 보조 기구에 적절
 - 적절한 태그를 사용하고 스타일링 등 HTML의 역할과 책임을 뛰어넘는 부분은 분리해야 함.
 - 웹 표준에 맞는 태그를 적절하게 사용
 
3) HTML의 역사
 - HTML이 처음 생겼을 때는 폰트, 문자 색상, 이미지 출력 기능 등을 지원하지 않음. 초기 HTML은 문서 구조를 형성하는 역할만을 담당.(+콘텐츠에 의미 부여)
 - 90년대 중반 이후 넷스케이프, 익스플로러 등 다양한 브라우저 탄생
 - 부족한 기능을 채우고자, 브라우저 제조사마다 고유한 HTML 고안
  - 문제 1 : 최초의 취지인 '콘텐츠의 의미를 부여하고 문서 구조를 형성하는 역할'과 점점 멀어짐.
  - 문제 2 : 호환성 문제(웹 브라우저별로 화면이 다르게 보이거나, 특정 웹 브라우저에서만 작동하는 웹 어플리케이션이 존재)
 - 위 문제점들을 해결하고자 W3C(World Wide Web Consortium)에서 웹 표준 정립
 - 웹 표준 초기에는 여전히 지원하지 못하는 부분이 많아, 비표준 태그와 Active X, Flash 등 서드파티 플러그인이 많이 사용
 - 점차 발전해 나가면서 브라우저 제조사들도 웹 표준에 맞추어 브라우저를 제작하기 시작
 - 현재 가장 널리 사용되는 버전은 HTML5

# CSS(Cascading Style Sheets)
1) CSS란?
 - (HTML이 구조를 잡는 데 사용된다면,) CSS는 웹 페이지의 스타일링과 디자인을 하는 데 사용

2) CSS의 역할과 책임 : 스타일링
 - CSS은 시각적으로 꾸며주는 역할
 - 개발자들이 서로 다른 부분을 개발할 수 있음.
 - 유지보수가 쉬움.
 - 검색엔진, 스크린리더 등 기계가 정보를 이해하기 쉬움.
 - 성능 향상
 - 계속 진화 중

# JavaScript
1) JavaScript란?
 - 웹 페이지를 동적으로 만드는 데 사용되는 프로그래밍 언어
 - 초기 웹 페이지는 사용자와의 상호작용이 없는 단순한 형태
   (클라이언트에서 웹 콘텐츠에 이벤트 기능을 추가하는 것이 쉽지 않았기 때문)
 - 모든 상호작용은 서버와의 통신을 통해서만 가능했음
  ex) 로그인 기능(에러 처리를 무조건 서버에서만 해줘야 함)
 - JavaScript가 생김으로써, 서버에 닿지 않아도 상호작용을 할 수 있고 브라우저에서 정보를 좀 더 복잡하게 표시할 수도 있게 되었음.

# Codepen.io 사용법, MDN, devdocs.io 검색엔진 추가 
 - https://codepen.io
 - (MDN : Mozilla Developer Network) https://developer.mozilla.org
 - https://devdocs.io
 - https://caniuse.com 